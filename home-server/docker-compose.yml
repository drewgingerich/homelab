networks:
  traefik: {}
  transmission: {}
  pihole: {}
  ddclient: {}
  podgrab: {}
  mealie: {}
  photoprism: {}
  filebrowser: {}
  firefly: {}

services:
  traefik-docker-socket-proxy:
    image: tecnativa/docker-socket-proxy
    restart: unless-stopped
    networks:
      - traefik
    environment:
      CONTAINERS: 1
    expose:
      - 2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  traefik:
    image: traefik
    restart: unless-stopped
    depends_on:
      - traefik-docker-socket-proxy
    security_opt:
      - no-new-privileges:true
    environment:
      LINODE_TOKEN: ${LINODE_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APP_DATA_DIR}/traefik:/config
    networks:
      - traefik
      - transmission
      - pihole
      - podgrab
      - mealie
      - photoprism
      - filebrowser
      - firefly
    ports:
      - "80:80"
      - "443:443"
    command:
      # - "--log.level=DEBUG"
      # -----
      - "--api.dashboard=true"
      # -----
      - "--providers.docker.endpoint=tcp://traefik-docker-socket-proxy:2375"
      - "--providers.docker.exposedbydefault=false"
      # -----
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}"
      # -----
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/config/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=linode"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      # -----
      - "--serversTransport.insecureSkipVerify=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  pihole:
    restart: unless-stopped
    image: pihole/pihole
    environment:
      DNSSEC: "true"
    volumes:
      - "${APP_DATA_DIR}/pihole/server:/etc/pihole"
      - "${APP_DATA_DIR}/pihole/dnsmasq:/etc/dnsmasq.d"
    networks:
      - pihole
    dns:
      - "127.0.0.1"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.pihole-adminredirect.redirectregex.regex=^https://pihole.${DOMAIN}/?$$"
      - "traefik.http.middlewares.pihole-adminredirect.redirectregex.replacement=https://pihole.${DOMAIN}/admin"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}`)"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.tls.certresolver=letsencrypt"
      - "traefik.http.routers.pihole.middlewares=pihole-adminredirect@docker"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"

  ddclient:
    restart: unless-stopped
    build:
      context: "./services/ddclient"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      NAMECHEAP_DOMAIN: ${NAMECHEAP_DOMAIN}
      NAMECHEAP_API_KEY: ${NAMECHEAP_API_KEY}
    networks:
      - ddclient

  transmission:
    image: lscr.io/linuxserver/transmission
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/transmission:/config
      - ${MEDIA_DIR}/torrents:/media/torrents
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - GUID=${PGID}
    networks:
      - transmission
    ports:
      - 51413:51413
      - 51413:51413/udp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN}`)"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.tls.certresolver=letsencrypt"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"

  sonarr:
    image: linuxserver/sonarr
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${APP_DATA_DIR}/sonarr:/config
      - ${MEDIA_DIR}:/media
    networks:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  radarr:
    image: linuxserver/radarr
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${APP_DATA_DIR}/radarr:/config
      - ${MEDIA_DIR}:/media
    networks:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  jackett:
    image: linuxserver/jackett
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${APP_DATA_DIR}/jackett:/config
    networks:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)"
      - "traefik.http.routers.jackett.tls=true"
      - "traefik.http.routers.jackett.tls.certresolver=letsencrypt"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"

  podgrab:
    image: akhilrex/podgrab
    restart: unless-stopped
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${APP_DATA_DIR}/podgrab:/config
      - ${MEDIA_DIR}/podcasts:/assets
    networks:
      - podgrab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podgrab.entrypoints=websecure"
      - "traefik.http.routers.podgrab.rule=Host(`podgrab.${DOMAIN}`)"
      - "traefik.http.routers.podgrab.tls=true"
      - "traefik.http.routers.podgrab.tls.certresolver=letsencrypt"
      - "traefik.http.services.podgrab.loadbalancer.server.port=8080"

  mealie:
    image: hkotel/mealie
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - ${APP_DATA_DIR}/mealie:/app/data
    networks:
      - mealie
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mealie.entrypoints=websecure"
      - "traefik.http.routers.mealie.rule=Host(`mealie.${DOMAIN}`)"
      - "traefik.http.routers.mealie.tls=true"
      - "traefik.http.routers.mealie.tls.certresolver=letsencrypt"

  photoprism:
    image: "photoprism/photoprism"
    depends_on:
      - "photoprism_db"
    restart: "unless-stopped"
    devices:
     - "/dev/dri:/dev/dri"
    environment:
      TZ: "${TZ}"
      PHOTOPRISM_PUID: "${PUID}"
      PHOTOPRISM_PGID: "${PGID}"
      PHOTOPRISM_DATABASE_SERVER: "photoprism_db"
      PHOTOPRISM_DATABASE_NAME: "photoprism"
      PHOTOPRISM_DATABASE_USER: "photoprism"
      PHOTOPRISM_DATABASE_PASSWORD: "photoprism"
    volumes:
      - "${APP_DATA_DIR}/photoprism/storage:/photoprism/storage"
      - "${MEDIA_DIR}/pictures:/photoprism/originals"
    networks:
      - photoprism
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photoprism.entrypoints=websecure"
      - "traefik.http.routers.photoprism.rule=Host(`photoprism.${DOMAIN}`)"
      - "traefik.http.routers.photoprism.tls=true"
      - "traefik.http.routers.photoprism.tls.certresolver=letsencrypt"
      - "traefik.http.services.photoprism.loadbalancer.server.port=2342"

  photoprism_db:
    image: "mariadb:10.6"
    restart: "unless-stopped"
    environment:
      MARIADB_ROOT_PASSWORD: "photoprism"
      MARIADB_DATABASE: "photoprism"
      MARIADB_USER: "photoprism"
      MARIADB_PASSWORD: "photoprism"
    volumes:
      - "${APP_DATA_DIR}/photoprism/mysql:/var/lib/mysql"
    networks:
      - photoprism

  filebrowser:
    image: filebrowser/filebrowser:s6
    restart: unless-stopped
    environment:
      TZ: "${TZ}"
      PUID: "${PUID}"
      PGID: "${PGID}"
    volumes:
      - "${APP_DATA_DIR}/filebrowser/config:/config"
      - "${APP_DATA_DIR}/filebrowser/database:/database"
      - "${MEDIA_DIR}:/srv"
    networks:
      - "filebrowser"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filebrowser.entrypoints=websecure"
      - "traefik.http.routers.filebrowser.rule=Host(`filebrowser.${DOMAIN}`)"
      - "traefik.http.routers.filebrowser.tls=true"
      - "traefik.http.routers.filebrowser.tls.certresolver=letsencrypt"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=80"

  firefly:
    image: fireflyiii/core
    depends_on:
      - firefly_db
    restart: unless-stopped
    environment:
      TZ: "${TZ}"
      PUID: "${PUID}"
      PGID: "${PGID}"
      APP_KEY: "${FIREFLY_APP_KEY}"
      DB_HOST: firefly_db
      DB_PORT: 5432
      DB_CONNECTION: pgsql
      DB_DATABASE: firefly
      DB_USERNAME: firefly
      DB_PASSWORD: firefly
      TRUSTED_PROXIES: "**"
      MAIL_PORT: 2525
    volumes:
      - "${APP_DATA_DIR}/firefly/upload:/var/www/html/storage/upload"
    networks:
      - "firefly"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.firefly.entrypoints=websecure"
      - "traefik.http.routers.firefly.rule=Host(`firefly.${DOMAIN}`)"
      - "traefik.http.routers.firefly.tls=true"
      - "traefik.http.routers.firefly.tls.certresolver=letsencrypt"
      - "traefik.http.services.firefly.loadbalancer.server.port=8080"

  firefly_db:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_DB: firefly
      POSTGRES_USER: firefly
      POSTGRES_PASSWORD: firefly
    volumes:
      - "${APP_DATA_DIR}/firefly/database:/var/lib/postgresql/data"
    networks:
      - "firefly"

  plex:
    image: linuxserver/plex
    restart: unless-stopped
    devices:
      - /dev/dri:/dev/dri
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - VERSION=${PLEX_VERSION}
    volumes:
      - ${APP_DATA_DIR}/plex:/config
      - ${MEDIA_DIR}/tv:/media/tv
      - ${MEDIA_DIR}/movies:/media/movies
      - ${MEDIA_DIR}/music:/media/music
      - ${MEDIA_DIR}/podcasts:/media/podcasts
    ports:
      - "32400:32400"
    network_mode: "host"
