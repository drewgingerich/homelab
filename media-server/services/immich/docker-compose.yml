name: immich

networks:
  service_gateway:
    name: service_gateway
  private: {}

services:
  server:
    image: ghcr.io/immich-app/immich-server:release
    restart: unless-stopped
    depends_on:
      - redis
      - database
    healthcheck:
      disable: false
    volumes:
      - ${MEDIA_DIR}/pictures:/usr/src/app/upload/library
      - ${APP_DATA_DIR}/immich/upload:/usr/src/app/upload/upload
      - ${APP_DATA_DIR}/immich/thumbs:/usr/src/app/upload/thumbs
      - ${APP_DATA_DIR}/immich/encoded-video:/usr/src/app/upload/encoded-video
      - ${APP_DATA_DIR}/immich/profile:/usr/src/app/upload/profile
      - ${APP_DATA_DIR}/immich/backups:/usr/src/app/upload/backups
    environment:
      TZ: ${TZ}
      DB_USERNAME: ${DB_USERNAME}
      DB_DATABASE_NAME: ${DB_DATABASE_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - service_gateway
      - private
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.immich.loadbalancer.server.port=2283"
      - "traefik.http.routers.immich.entrypoints=web-secure"
      - "traefik.http.routers.immich.rule=Host(`immich.${DOMAIN}`)"

  # immich-machine-learning:
  #   image: ghcr.io/immich-app/immich-machine-learning:release
  #   volumes:
  #     - model-cache:/cache
  #   env_file:
  #     - .env
  #   restart: unless-stopped
  #   healthcheck:
  #     disable: false

  redis:
    image: docker.io/redis:6.2-alpine
    restart: unless-stopped
    networks:
      - private
    healthcheck:
      test: redis-cli ping || exit 1

  database:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${APP_DATA_DIR}/immich/postgres:/var/lib/postgresql/data
    networks:
      - private
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;
        Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align
        --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
        echo "checksum failure count is $$Chksum";
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on

# volumes:
#   model-cache:
