networks:
  service_gateway:
    name: service_gateway
  private: {}

services:
  server:
    image: vabene1111/recipes
    restart: unless-stopped
    depends_on:
      - database
    environment:
      TIMEZONE: ${TZ}
      SECRET_KEY: ${TANDOOR_SECRET_KEY}
      DB_ENGINE: django.db.backends.postgresql
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: tandoor
      POSTGRES_USER: tandoor
      POSTGRES_PASSWORD: tandoor
    volumes:
      - ${APP_DATA_DIR}/tandoor/static:/opt/recipes/staticfiles
      - ${APP_DATA_DIR}/tandoor/media:/opt/recipes/mediafiles
    networks:
      - service_gateway
      - private
    labels:
      - "traefik.enable=true"
      # ---
      - "traefik.http.services.tandoor.loadbalancer.server.port=8080"
      # ---
      - "traefik.http.routers.tandoor-lan.entrypoints=web-secure"
      - "traefik.http.routers.tandoor-lan.rule=Host(`tandoor.${LAN_DOMAIN}`) || Host(`tandoor.vpn.${LAN_DOMAIN}`)"
      - "traefik.http.routers.tandoor-lan.tls=true"
      - "traefik.http.routers.tandoor-lan.tls.certresolver=letsencrypt"

  database:
    image: postgres:11-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: tandoor
      POSTGRES_USER: tandoor
      POSTGRES_PASSWORD: tandoor
    volumes:
      - ${APP_DATA_DIR}/tandoor/postgres:/var/lib/postgresql/data
    networks:
      - private
